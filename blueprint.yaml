blueprint:
  name: "Blueprint for Command Mode of Tuya ERS-10TZBVK-AA Smart Knob (light entity)"
  description: "Blueprint to configure the command mode Tuya ERS-10TZBVK-AA Smart Knob. It is based directly on the Zigbee2MQTT-Topic to ensure maximum smoothness. Also see https://www.zigbee2mqtt.io/devices/ERS-10TZBVK-AA.html"
  domain: automation
  input:
    mqtt_topic:
      name: MQTT Topic
      description: "The parent MQTT topic of the smart knob (e.g. 'zigbee2mqtt/Tuya Smart Knob'"
      selector:
        text:
    light_entity:
      name: Light Entity
      description: "The light entity to be controlled."
      selector:
        entity:
          domain: light
    step_multiplier:
      name: Step Multiplier
      description: "Multiplier for color temperature change. I.e. in which resolution do you want to fine tune color temperature? (1 = very fine; 10 = faster change)"
      default: 5
      selector:
        number:
          min: 1
          max: 10
          mode: slider
    kelvin_min:
      name: Minimum Color Temperature (Kelvin) (default 2000)
      description: "The minimum color temperature in Kelvin."
      default: 2000
      selector:
        number:
          min: 1000
          max: 6500
    kelvin_max:
      name: Maximum Color Temperature (Kelvin)
      description: "The maximum color temperature in Kelvin."
      default: 6500
      selector:
        number:
          min: 1000
          max: 6500
    min_brightness:
      name: Minimum Brightness (%) - 
      description: "Set 0 to be able to turn off the light with the dimmer. (default 1)"
      default: 1
      selector:
        number:
          min: 0
          max: 100
    light_transition:
      name: Light Transition
      description: "Configure light transition time."
      default: 0.4
      selector:      
        number:
          min: 0
          max: 1
          unit_of_measurement: milliseconds

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

condition: []

action:
  - variables:
      command: "{{ trigger.payload_json.action }}"
      step_size: "{{ trigger.payload_json.action_step_size }}"
      step_percent: >-
        {% if is_number(step_size) %} {{ (step_size / 2 ) | int }} {% else %} {{
        0 }} {% endif %}
      step_multiplier: !input step_multiplier
      kelvin_min: !input kelvin_min
      kelvin_max: !input kelvin_max
      min_brightness: !input minimum_brightness

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ command == 'toggle' }}"
        sequence:
          - service: light.toggle
            target:
              entity_id: !input light_entity

      - conditions:
          - condition: template
            value_template: "{{ command == 'brightness_step_down' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data_template:
              brightness: >-
                {% set current_brightness =
                state_attr(light_entity, 'brightness') | int %} 
                {% set new_brightness = current_brightness - (step_percent * 255 / 100) %}
                {{ [new_brightness, min_brightness] | max }}
              transition: 0.3

      - conditions:
          - condition: template
            value_template: "{{ command == 'brightness_step_up' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data_template:
              brightness_step_pct: "{{ step_percent }}"
              transition: 0.3

      - conditions:
          - condition: template
            value_template: "{{ command == 'color_temperature_step_up' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data_template:
              kelvin: >-
                {% set current_kelvin = state_attr(light_entity, 'color_temp_kelvin') %}
                {% if current_kelvin is not none %}
                  {{ [current_kelvin + (step_percent * step_multiplier), kelvin_max] | min }}
                {% else %}
                  2800
                {% endif %}
              transition: 0.2

      - conditions:
          - condition: template
            value_template: "{{ command == 'color_temperature_step_down' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: !input light_entity
            data_template:
              kelvin: >-
                {% set current_kelvin = state_attr(light_entity, 'color_temp_kelvin') %}
                {% if current_kelvin is not none %}
                  {{ [current_kelvin - (step_percent * step_multiplier), kelvin_min] | max }}
                {% else %}
                  2800
                {% endif %}
              transition: 0.2

mode: single
